require('pandocomatic')
require('darkmode')
require('fixOutlineTrigger')
require('lightmode')
require('quickgit')
vim.api.nvim_create_user_command('DarkMode', function() Darkmode() end, {})
vim.api.nvim_create_user_command('LightMode', function() Lightmode() end, {})
vim.api.nvim_create_user_command('ToggleOutlineHotkey', function() ToggleOutlineHotkey() end, {})

vim.keymap.set("n", "<leader><leader>F", "<esc>:FZF<cr>")
vim.keymap.set("n", "ga", "<Plug>(EasyAlign)")
vim.keymap.set("i", "<c-b>", "<esc>i")
vim.keymap.set("i", "<c-,>", "<esc><c-,>")
vim.keymap.set("i", "<c-f>", "<esc>la")
vim.keymap.set("i", "<c-h>", "%")
vim.keymap.set("i", "<c-i>", "<esc>I")
vim.keymap.set("i", "<c-n>", "<esc>A")
vim.keymap.set("i", "<C-S-Space>", "<c-o>x")
vim.keymap.set("i", "<c-s-y>", "<esc>:%y *<cr>")
vim.keymap.set("i", "<F11>", "<esc>:bp<cr>")
vim.keymap.set("i", "<F12>", "<esc>:bn<cr>")
vim.keymap.set("i", "<leader><cr>", "<esc><leader><cr>")
vim.keymap.set("i", "<leader>`", "<esc>:bn<cr>")
vim.keymap.set("i", "<leader><leader>c", "<esc><leader><leader>c")
vim.keymap.set("i", "<leader><leader><cr>", "<esc><leader><leader><cr>")
vim.keymap.set("i", "<tab>", "<tab>")
vim.keymap.set("n", "<c-,>", "A,<esc>")
vim.keymap.set("n", "<c-B>", "0")
vim.keymap.set("n", "<c-F>", "$")
vim.keymap.set("n", "<c-h>", "%")
vim.keymap.set("n", "<c-'>", "i<space><Esc>la<space><Esc>h")
vim.keymap.set("n", "<c-j>", "o<Esc>k")
vim.keymap.set("n", "<c-k>", "O<Esc>j")
vim.keymap.set("n", "<c-l>", "<c-j><c-k>", {remap = true})
vim.keymap.set("n", "<c-m-j>", "3j")
vim.keymap.set("n", "<c-m-k>", "3k")
vim.keymap.set("n", "<c-n>", "A")
vim.keymap.set("n", "<c-s-j>", "vipJ")
vim.keymap.set("n", "<c-s-m>", ":cope<cr>")
vim.keymap.set("n", "<c-s>", ":w<cr>")
vim.keymap.set("n", "<c-s-y>", ":%y *<cr>")
vim.keymap.set("n", "<F10>", "<Plug>(Marks-next)")
vim.keymap.set("n", "<F11>", ":bp<cr>")
vim.keymap.set("n", "<F12>", ":bn<cr>")
vim.keymap.set("n", "<F1>", ":UndotreeToggle<cr>")
vim.keymap.set("n", "<F9>", "<Plug>(Marks-prev)")
vim.keymap.set("n", "ga", "<Plug> (EasyAlign)")
vim.keymap.set("n", "gf", "yy:!rifle <c-r><cr><cr>")
vim.keymap.set("n", "H", "<Plug>Sneak_S")
vim.keymap.set("n", "<leader>1", ':lua require("harpoon.ui").nav_file(1)<cr>')
vim.keymap.set("n", "<leader>2", ':lua require("harpoon.ui").nav_file(2)<cr>')
vim.keymap.set("n", "<leader>3", ':lua require("harpoon.ui").nav_file(3)<cr>')
vim.keymap.set("n", "<leader>4", ':lua require("harpoon.ui").nav_file(4)<cr>')
vim.keymap.set("n", "<leader>5", ':lua require("harpoon.ui").nav_file(5)<cr>')
vim.keymap.set("n", "<leader>6", ':lua require("harpoon.ui").nav_file(6)<cr>')
vim.keymap.set("n", "<leader>7", ':lua require("harpoon.ui").nav_file(7)<cr>')
vim.keymap.set("n", "<leader>a", ':lua require("harpoon.mark").add_file()<cr>')
vim.keymap.set("n", "<leader>`", ':bn<cr>')
vim.keymap.set("n", "<leader>e", ':e!<cr>')
vim.keymap.set("n", "<leader><leader>a", ':lua require("harpoon.ui").toggle_quick_menu()<cr>')
vim.keymap.set("n", "<leader><leader>c", "Onewcomment <esc>:call UltiSnips#ListSnippets()<cr>1<cr>")
vim.keymap.set("n", "<leader><leader><leader>", "gw")
vim.keymap.set("n", "<leader><leader>-", ":res -10<cr>")
vim.keymap.set("n", "<leader><leader>=", ":res +10<cr>")
vim.keymap.set("n", "<leader><leader>s", ":browse old<cr>")
vim.keymap.set("n", "<leader><leader>z", "zz")
vim.keymap.set("n", "<leader>m", ":cfile errors.txt<cr>")
vim.keymap.set("n", "<leader>p", "ap")
vim.keymap.set("n", "<leader><s-p>", "aP")
vim.keymap.set("n", "<leader><tab>", "zz")
vim.keymap.set("n", "L", "<Plug>Sneak_s")
vim.keymap.set("n", "<PageDown>", ":cnext<cr>zz")
vim.keymap.set("n", "<PageUp>", ":cprev<cr>zz")
vim.keymap.set("n", "<s-m>", ":ccl<cr>")
vim.keymap.set("n", "<space>", "5<c-e>")
vim.keymap.set("v", "<leader>y", "*y")
vim.keymap.set("v", "<leader><leader><leader>", "gwzz")
vim.keymap.set("v", "<c-s-y>", ":y *<cr>")
vim.keymap.set("v", "<c-i>", ":!pipeToInvert.sh<cr>")
vim.keymap.set("v", "<c-h>", "%")
vim.keymap.set("v", "<c-F>", "$")
vim.keymap.set("v", "<c-B>", "0")


vim.cmd([[au TextYankPost * silent! lua vim.highlight.on_yank { timeout=50 }]])
vim.cmd([[filetype plugin indent on]])
vim.cmd([[colorscheme torte]])
vim.cmd([[set nohlsearch]])
vim.cmd([[hi Conceal NONE]])
vim.cmd([[hi CursorLine guibg=#111111]])
vim.cmd([[hi CursorLineNR guibg=#111111]])
vim.cmd([[hi Function gui=bold]])
vim.cmd([[highlight htmlH1 gui=bolditalic]])
vim.cmd([[highlight markdownBold gui=bold]])
vim.cmd([[highlight markdownH1 gui=bolditalic]])
vim.cmd([[highlight markdownItalic gui=italic]])
vim.cmd([[hi ModeMsg ctermbg=yellow]])
vim.cmd([[hi ModeMsg ctermfg=red]])
vim.cmd([[hi MoreMsg ctermbg=yellow]])
vim.cmd([[hi MoreMsg ctermfg=red]])
vim.cmd([[hi StatusLine ctermbg=236]])
vim.cmd([[hi StatusLine ctermfg=218]])
vim.cmd([[hi StatusLine gui=italic]])
vim.cmd([[hi StatusLineNC ctermbg=darkgrey]])
vim.cmd([[hi StatusLineNC ctermfg=173]])
vim.cmd([[hi StatusLineNC gui=italic]])
vim.cmd([[hi VertSplit guibg=#000000]])
vim.cmd([[hi Visual guibg=#008565]])

vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.cpp", "*.hpp", "*.h", "*.pl"}, callback = function() vim.keymap.set("i", "<C-S-;>", "::") end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.cpp", "*.hpp", "*.h", "*.pl"}, callback = function() vim.keymap.set("n", "<C-0>", ':!geeks.py "<cword> c++ cpp"<cr><cr>') end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.cpp", "*.hpp", "*.h", "*.pl"}, callback = function() vim.keymap.set("n", "<C-9>", ':!FL.py "<cword> site:cppreference.com"<cr><cr>') end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.cpp", "*.hpp", "*.h", "*.pl"}, callback = function() vim.keymap.set("n", "<C-S-k>", ":!make<cr>") end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.py"}, callback = function() vim.keymap.set('n', '<c-;>', '<c-n>:<esc>') end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js", "*.ts", "*.pl", "*.php", "*.cpp", "*.hpp", "*.c", "*.lua", "*.h"}, callback = function() vim.keymap.set('n', '<c-;>', '<c-n>;<esc>') end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js", "*.ts", "*.pl", "*.php", "*.cpp", "*.hpp", "*.c", "*.py", "*.lua", "*.h"}, callback = function() vim.keymap.set('i', '<c-;>', '<esc><c-;>') end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.md"}, callback = function() vim.keymap.set("n", "<leader><leader><leader>p", function() Pandocomatic{justopensioyek=true} end) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<leader><leader><leader>p", function() Pandocomatic{latex=true, justopensioyek=true} end) end})

vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<C-S-k>", [[:lua Pandocomatic{latex=true}<cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("i", "<C-S-k>", [[<esc>:lua Pandocomatic{latex=true}<cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.b.surround_45 = "\\[ \r \\]" end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("i", "<c-,>", [[<esc><c-,>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("i", "<c-.>", [[<esc><c-.>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<c-,>", [[<c-n>,<esc>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<c-.>", [[<c-n>.<esc>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<leader><leader><leader>d", [[:!openInDictionary.sh "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<leader><leader><leader>s", [[:!openInSEP.sh "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("n", "<leader><leader><leader>t", [[:!openInThesaurus.sh "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.tex"}, callback = function() vim.keymap.set("v", "<leader>gc", [[c%<c-r>"<cr><esc>]]) end})


vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("n", "<s-k>", [[:!FL.py "<cword> site:api.jquery.com"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("v", "<s-k>", [[:!FL.py "<cword> site:api.jquery.com"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("n", "<s-k><s-k>", [[:!searchMDNjavascript "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("v", "<s-k><s-k>", [[:!searchMDNjavascript "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("v", "<s-k><s-k><s-k>", [[:!FL.py "<cword> site:https://nodejs.org/en/docs"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.js","*.ts"}, callback = function() vim.keymap.set("n", "<s-k><s-k><s-k>", [[:!FL.py "<cword> site:https://nodejs.org/en/docs"<cr><cr>]]) end})

vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.md"}, callback = function() vim.keymap.set("n", "<F3>", [[/^## <cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.md"}, callback = function() vim.keymap.set("n", "<F4>", [[:MarkdownPreview<cr>]]) end})
-- vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.md"}, callback = function() vim.keymap.set("n", "<leader><cr>", [[}<c-j>k/^\s*$<cr>i<cr>-]]) end})
-- vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.md"}, callback = function() vim.keymap.set("n", "<leader><leader><cr>", [[}<c-j>k/^\s*$<cr>i<c-space>>]]) end})

vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.php"}, callback = function() vim.keymap.set({"n", "v"}, "<s-k>", [[:!searchPHPdocs "<cword>"<cr><cr>]]) end})
vim.api.nvim_create_autocmd({"FileType"}, {pattern = {"*.py"}, callback = function() vim.keymap.set("n", "<s-k>", [[:!searchPythonDocs.sh "<cword>"<cr><cr>]]) end})

vim.keymap.set("i", "<c-e>", [[<esc>Ea]])
vim.keymap.set("i", "<c-l>", [[<Esc>]])
vim.keymap.set("i", "<c-space>", [[<space><space>]])
vim.keymap.set("n", "<c-d>", [[5<c-d>]])
vim.keymap.set("n", "<c-i>", [[<c-i>zz]])
vim.keymap.set("n", "<c-o>", [[<c-o>zz]])
vim.keymap.set("n", "<c-space>", [[5<c-y>]])
vim.keymap.set("n", "<c-u>", [[5<c-u>]])
vim.keymap.set("n", "<F7>", [[:set hlsearch!<cr>]])
vim.keymap.set("n", "gR", [[<cmd>Trouble lsp toggle focus=true<cr>]])
vim.keymap.set("n", "<leader><leader>t", [[<cmd>Trouble diagnostics toggle focus=true<cr>]])
vim.keymap.set("n", "<leader>xw", [[<cmd>Trouble diagnostics toggle filter.buf=0 focus=true<cr>]])
vim.keymap.set("n", "n", [[nzz]])
vim.keymap.set("n", "N", [[Nzz]])
vim.keymap.set("n", "X", [[diw]])
vim.keymap.set("v", "<c-d>", [[2<c-d>]])
vim.keymap.set("v", "<c-j>", ":m '>+1<CR>gv=gv")
vim.keymap.set("v", "<c-k>", ":m '<-2<CR>gv=gv")
vim.keymap.set("v", "<c-u>", [[2<c-u>]])

vim.g.rnvimr_action = { ["<C-B>"] = "NvimEdit tabedit",  ["<C-x>"] = "NvimEdit split",  ["<C-v>"] = "NvimEdit vsplit",  ["<C-o>"] = "NvimEdit drop",  ["<CR>"] = "NvimEdit drop",  ["gw"] = "JumpNvimCwd",  ["yw"] = "EmitRangerCwd" }
vim.g.rnvimr_layout = {  relative= 'editor',  width= math.floor(0.8 * vim.o.columns),  height= math.floor(0.8 * vim.o.lines),  col= math.floor(0.15 * vim.o.columns),  row= math.floor(0.15 * vim.o.lines), style= 'minimal'  }

vim.g.FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g "" /home/justin/'
vim.g.auto_save=1
vim.g.ctrlp_cmd = 'CtrlPBuffer'
vim.g.surround_108 = "\\begin{\1environment: \1}\r\\end{\1\1}"
vim.g.surround_99 = "\\\1command: \1{\r}"
vim.g.UltiSnipsEditSplit="vertical"
vim.g.UltiSnipsExpandTrigger = "<C-CR>"
vim.g.UltiSnipsJumpForwardTrigger = '<C-S-Space>'
vim.g.vimtex_indent_enabled = 0
vim.g.vimtex_quickfix_enabled = 0
vim.g.vimtex_syntax_conceal_disable = 1
vim.g.vimtex_toc_todo_labels = {TODO = 'TODO'}
vim.g.maplocalleader = "\\" 

vim.opt.cursorline = true
vim.opt.ignorecase = true
vim.opt.incsearch = true
vim.opt.nu = true
vim.opt.relativenumber = true
vim.opt.smartcase = true
vim.opt.shiftwidth = 4
vim.opt.signcolumn = "yes"
vim.opt.fillchars = "stlnc:―"
vim.opt.updatetime = 3000
vim.opt.virtualedit = "onemore"
vim.opt.nrformats:append("alpha")
vim.opt.formatoptions:remove("cro")
vim.opt.runtimepath:prepend("/home/justin/.config/nvim/nvim-treesitter-parsers")

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- Example using a list of specs with the default options
-- vim.g.mapleader = " " -- Make sure to set `mapleader` before lazy so your mappings are correct

require("lazy").setup({
	{"hrsh7th/cmp-nvim-lsp-signature-help"},
	{"latex-lsp/texlab"},
	{
	  "hedyhli/outline.nvim",
	  config = function()
	    -- Example mapping to toggle outline
	    outline_keyword = "y",
	    vim.keymap.set("n", "<leader>y", "<cmd>Outline<CR>",
	      { desc = "Toggle Outline" }),
	    require("outline").setup {
		outline_window = {
		    width = 50,
		}
	      -- Your setup opts here (leave empty to use defaults)
	    }
	  end,
	},
	{ "justinmk/vim-sneak" },
	{ "folke/neodev.nvim", opts = {} },
	{'junegunn/fzf'},
	-- {"glepnir/lspsaga.nvim",
	    -- event = "LspAttach",
	    -- config = function()
	    -- require("lspsaga").setup({})
	    -- end,
	    -- dependencies = {
		-- {"nvim-tree/nvim-web-devicons"},
		-- --Please make sure you install markdown and markdown_inline parser
		-- {"nvim-treesitter/nvim-treesitter"}
	    -- }
	    -- },
	{ "folke/which-key.nvim" },
	-- {"folke/neoconf.nvim", cmd = "Neoconf" },
	{'kevinhwang91/rnvimr'},
	{'jc-doyle/cmp-pandoc-references'},
	{'hrsh7th/cmp-nvim-lsp'},
	{'pocco81/true-zen.nvim'},
	{'hrsh7th/cmp-buffer'},
	{'hrsh7th/cmp-omni'},
	{'hrsh7th/cmp-path'},
	{'hrsh7th/cmp-cmdline'},
	{'hrsh7th/nvim-cmp'},
	{'hrsh7th/cmp-calc'},
	{'hrsh7th/cmp-nvim-lua'},
	{'windwp/nvim-autopairs'},
	{'tom-anders/telescope-vim-bookmarks.nvim'},
	{'AndrewRadev/splitjoin.vim'},
	{'nvim-lualine/lualine.nvim'},
	{'nvim-telescope/telescope.nvim'},
	-- {'qpkorr/vim-renamer'},
	{'nvim-tree/nvim-web-devicons'},
	{'folke/trouble.nvim',   
	    opts = {}, -- for default options, refer to the configuration section for custom setup.
	    cmd = "Trouble", },
	{'junegunn/vim-easy-align'},
	{'mbbill/undotree'},
	{'sainnhe/everforest'},
	{'sainnhe/edge'},
	{'rebelot/kanagawa.nvim'},
	{'EdenEast/nightfox.nvim'},
	{'catppuccin/nvim'},
	-- {'chentoast/marks.nvim'},
	{'bluz71/vim-moonfly-colors'},
	'nvim-treesitter/nvim-treesitter', build = ":TSUpdate",
	-- {'nvim-treesitter/nvim-treesitter-context'},
	{'tpope/vim-markdown'},
	{'rose-pine/neovim'},
	-- to use titlecase, highlight and hit gz <= 02/17/24 14:22:34 " 
	{'christoomey/vim-titlecase'},
	{'triglav/vim-visual-increment'},
	{'nvim-lua/plenary.nvim'},
	{'ThePrimeagen/harpoon'},
	{'ajorgensen/vim-markdown-toc'},
	{'907th/vim-auto-save'},
	{'jacoborus/tender.vim'},
	{'iamcco/markdown-preview.nvim'},
	{'tpope/vim-repeat'},
	{'wellle/targets.vim'},
	{'ctrlpvim/ctrlp.vim'},
	{'tpope/vim-fugitive'},
	{'tpope/vim-commentary'},
	{'gruvbox-community/gruvbox'},
	{'junegunn/goyo.vim'},
	{'SirVer/ultisnips'},
	{'lervag/vimtex'},
	{'honza/vim-snippets'},
	{'tpope/vim-surround'},
	{'neovim/nvim-lspconfig'},
})

require("globals")

vim.g.mapleader = '\\'

require'nvim-treesitter.configs'.setup {
  vim.opt.runtimepath:append("/home/justin/.config/nvim/nvim-treesitter-parsers"),
  parser_install_dir = "/home/justin/.config/nvim/nvim-treesitter-parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!
  -- A list of parser names, or "allg
  ensure_installed = { "php", "http", "python", "c", "cpp", "vimdoc", "markdown", "markdown_inline", "vim", "lua", "css", "html", "rust", "javascript", "java" },
  vim.treesitter.language.register('html', 'hb'),
  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = true,
  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = false,
  -- List of parsers to ignore installing (for "all")
  -- ignore_install = { "javascript" },
  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  indent = {
      enable = true,
  },
  highlight = {
    -- `false` will disable the whole extension
    enable = true,
    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be  in grand world situations are probabilitieedisabled
    disable = { "markdown", "vimdoc", "markdown-inline", "latex", "tex", "cpp" },
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    -- disable = function(lang, buf)
        -- local max_filesize = 100 * 1024 -- 100 KB
        -- local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        -- if ok and stats and stats.size > max_filesize then
          --   return true
        -- end
    -- end,
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
 
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
function compose (tab1, key, val) temp = tab1; temp[key] = val; return temp end
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, compose(opts, "desc", "lsp diagnostic open float"))
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, compose(opts, "desc", "lsp diagnostic go to prev"))
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, compose(opts, "desc", "lsp diagnostic go to next"))
vim.keymap.set('n', '<leader>d', vim.diagnostic.setloclist, compose(opts, "desc", "set loc list"))
vim.keymap.set('n', '<C-S-I>', function() vim.lsp.buf.hover(); vim.lsp.buf.hover(); end, compose(opts, "desc", "lsp hover"))
vim.keymap.set("n", "<C-S-;>", "<cmd>Outline<CR>")

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
  -- -- Mappings.
  -- -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  -- vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<leader>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<leader>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<leader>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<leader>f', function() vim.lsp.buf.format { async = true } end, bufopts)
end


local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}
require'lspconfig'.ruff.setup{}
require'lspconfig'.pyright.setup{}
require('lspconfig')['clangd'].setup{
    on_attach = on_attach,
    flags = lsp_flags,
    capabilities = capabilities, 
    cmd = { "clangd", '--background-index', '--clang-tidy' }
}

require('lspconfig')['intelephense'].setup{
    on_attach = on_attach,
    flags = lsp_flags,
    capabilities = capabilities, 
    cmd = { "intelephense", '--stdio' },
    filetypes = { "php" }
}

local servers = { 'perlpls' }
for _, lsp in pairs(servers) do
  require('lspconfig')[lsp].setup {
    settings = {
      perl = {
        perlcritic = { enabled = true },
        syntax = { enabled = true },
      },
    },
    single_file_support = true,
    on_attach = function(client, bufnr)
      -- Your custom mappings and settings here
    end,
    capabilities = require('cmp_nvim_lsp').default_capabilities(),
  }
end

require'lspconfig'.texlab.setup{}

require('lspconfig')['ts_ls'].setup{
    on_attach = on_attach,
    flags = lsp_flags,
}
--Enable (broadcasting) snippet capability for completion
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

require'lspconfig'.cssls.setup {
  capabilities = capabilities,
}
--Enable (broadcasting) snippet capability for completion
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true

require'lspconfig'.lua_ls.setup{}

require'lspconfig'.html.setup {
    on_attach = on_attach,
    flags = lsp_flags,
    capabilities = capabilities, 
    cmd = { "html-languageserver", '--stdio' },
    filetypes = { 'html', 'php', 'hb' },
}

require('lspconfig')['rust_analyzer'].setup{
    on_attach = on_attach,
    flags = lsp_flags,
    -- Server-specific settings...
    settings = {
      ["rust-analyzer"] = {}
    }
}
local configs = require('lspconfig.configs')

---@class trouble.Mode: trouble.Config,trouble.Section.spec
---@field desc? string
---@field sections? string[]

---@class trouble.Config
---@field mode? string
---@field config? fun(opts:trouble.Config)
---@field formatters? table<string,trouble.Formatter> custom formatters
---@field filters? table<string, trouble.FilterFn> custom filters
---@field sorters? table<string, trouble.SorterFn> custom sorters
local defaults = {
  auto_close = false, -- auto close when there are no items
  auto_open = false, -- auto open when there are items
  auto_preview = true, -- automatically open preview when on an item
  auto_refresh = true, -- auto refresh when open
  auto_jump = false, -- auto jump to the item when there's only one
  focus = false, -- Focus the window when opened
  restore = true, -- restores the last location in the list when opening
  follow = true, -- Follow the current item
  indent_guides = true, -- show indent guides
  max_items = 200, -- limit number of items that can be displayed per section
  multiline = true, -- render multi-line messages
  pinned = false, -- When pinned, the opened trouble window will be bound to the current buffer
  warn_no_results = true, -- show a warning when there are no results
  open_no_results = false, -- open the trouble window when there are no results
  ---@type trouble.Window.opts
  win = {}, -- window options for the results window. Can be a split or a floating window.
  -- Window options for the preview window. Can be a split, floating window,
  -- or `main` to show the preview in the main editor window.
  ---@type trouble.Window.opts
  preview = {
    type = "main",
    -- when a buffer is not yet loaded, the preview window will be created
    -- in a scratch buffer with only syntax highlighting enabled.
    -- Set to false, if you want the preview to always be a real loaded buffer.
    scratch = true,
  },
  -- Throttle/Debounce settings. Should usually not be changed.
  ---@type table<string, number|{ms:number, debounce?:boolean}>
  throttle = {
    refresh = 20, -- fetches new data when needed
    update = 10, -- updates the window
    render = 10, -- renders the window
    follow = 100, -- follows the current item
    preview = { ms = 100, debounce = true }, -- shows the preview for the current item
  },
  -- Key mappings can be set to the name of a builtin action,
  -- or you can define your own custom action.
  ---@type table<string, trouble.Action.spec>
  keys = {
    ["?"] = "help",
    r = "refresh",
    R = "toggle_refresh",
    q = "close",
    o = "jump_close",
    ["<esc>"] = "cancel",
    ["<cr>"] = "jump",
    ["<2-leftmouse>"] = "jump",
    ["<c-s>"] = "jump_split",
    ["<c-v>"] = "jump_vsplit",
    -- go down to next item (accepts count)
    -- j = "next",
    ["}"] = "next",
    ["]]"] = "next",
    -- go up to prev item (accepts count)
    -- k = "prev",
    ["{"] = "prev",
    ["[["] = "prev",
    dd = "delete",
    d = { action = "delete", mode = "v" },
    i = "inspect",
    p = "preview",
    P = "toggle_preview",
    zo = "fold_open",
    zO = "fold_open_recursive",
    zc = "fold_close",
    zC = "fold_close_recursive",
    za = "fold_toggle",
    zA = "fold_toggle_recursive",
    zm = "fold_more",
    zM = "fold_close_all",
    zr = "fold_reduce",
    zR = "fold_open_all",
    zx = "fold_update",
    zX = "fold_update_all",
    zn = "fold_disable",
    zN = "fold_enable",
    zi = "fold_toggle_enable",
    gb = { -- example of a custom action that toggles the active view filter
      action = function(view)
        view:filter({ buf = 0 }, { toggle = true })
      end,
      desc = "Toggle Current Buffer Filter",
    },
    s = { -- example of a custom action that toggles the severity
      action = function(view)
        local f = view:get_filter("severity")
        local severity = ((f and f.filter.severity or 0) + 1) % 5
        view:filter({ severity = severity }, {
          id = "severity",
          template = "{hl:Title}Filter:{hl} {severity}",
          del = severity == 0,
        })
      end,
      desc = "Toggle Severity Filter",
    },
  },
  ---@type table<string, trouble.Mode>
  modes = {
    -- sources define their own modes, which you can use directly,
    -- or override like in the example below
    lsp_references = {
      -- some modes are configurable, see the source code for more details
      params = {
        include_declaration = true,
      },
    },
    -- The LSP base mode for:
    -- * lsp_definitions, lsp_references, lsp_implementations
    -- * lsp_type_definitions, lsp_declarations, lsp_command
    lsp_base = {
      params = {
        -- don't include the current location in the results
        include_current = false,
      },
    },
    -- more advanced example that extends the lsp_document_symbols
    symbols = {
      desc = "document symbols",
      mode = "lsp_document_symbols",
      focus = false,
      win = { position = "right" },
      filter = {
        -- remove Package since luals uses it for control flow structures
        ["not"] = { ft = "lua", kind = "Package" },
        any = {
          -- all symbol kinds for help / markdown files
          ft = { "help", "markdown" },
          -- default set of symbol kinds
          kind = {
            "Class",
            "Constructor",
            "Enum",
            "Field",
            "Function",
            "Interface",
            "Method",
            "Module",
            "Namespace",
            "Package",
            "Property",
            "Struct",
            "Trait",
          },
        },
      },
    },
  },
  -- stylua: ignore
  icons = {
    ---@type trouble.Indent.symbols
    indent = {
      top           = "│ ",
      middle        = "├╴",
      last          = "└╴",
      -- last          = "-╴",
      -- last       = "╰╴", -- rounded
      fold_open     = " ",
      fold_closed   = " ",
      ws            = "  ",
    },
    folder_closed   = " ",
    folder_open     = " ",
    kinds = {
      Array         = " ",
      Boolean       = "󰨙 ",
      Class         = " ",
      Constant      = "󰏿 ",
      Constructor   = " ",
      Enum          = " ",
      EnumMember    = " ",
      Event         = " ",
      Field         = " ",
      File          = " ",
      Function      = "󰊕 ",
      Interface     = " ",
      Key           = " ",
      Method        = "󰊕 ",
      Module        = " ",
      Namespace     = "󰦮 ",
      Null          = " ",
      Number        = "󰎠 ",
      Object        = " ",
      Operator      = " ",
      Package       = " ",
      Property      = " ",
      String        = " ",
      Struct        = "󰆼 ",
      TypeParameter = " ",
      Variable      = "󰀫 ",
    },
  },
}

require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'iceberg_dark',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode', 
    },
    lualine_b = {'branch', 'diff', 
    {
	    'diagnostics',

	    -- Table of diagnostic sources, available sources are:
	    --   'nvim_lsp', 'nvim_diagnostic', 'nvim_workspace_diagnostic', 'coc', 'ale', 'vim_lsp'.
	    -- or a function that returns a table as such:
	    --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }
	    sources = { 'nvim_lsp' },

	    -- Displays diagnostics for the defined severity types
	    sections = { 'error', 'warn', 'info', 'hint' },

	    -- diagnostics_color = {
		-- -- Same values as the general color option can be used here.
		-- error = 'DiagnosticError', -- Changes diagnostics' error color.
		-- warn  = 'DiagnosticWarn',  -- Changes diagnostics' warn color.
		-- info  = 'DiagnosticInfo',  -- Changes diagnostics' info color.
		-- hint  = 'DiagnosticHint',  -- Changes diagnostics' hint color.
	    -- },
	    symbols = {error = 'E', warn = 'W', info = 'I', hint = 'H'},
	    colored = false,	   -- Displays diagnostics status in color if set to true.
	    update_in_insert = false, -- Update diagnostics in insert mode.
	    always_visible = false,   -- Show diagnostics even if there are none.
    }
    },
    lualine_c = {'filename', {separator = '----'}},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}

local telesc = require('telescope.builtin')
-- local pando = require('pandocomatic')
require('telescope').setup{
    defaults = {
	layout_strategy = 'vertical',
	layout_config = { 
	    -- top_pane = {
		    -- height = 25,
		    -- prompt_position = "top"
		-- },
	    -- bottom_pane = {
		    -- height = 25,
		    -- preview_cutoff = 10,
		    -- prompt_position = "top"
		-- },
		-- center = {
		    -- height = 0.4,
		    -- preview_cutoff = 40,
		    -- prompt_position = "top",
		    -- width = 0.5
		    -- },
		-- cursor = {
		    -- height = 0.9,
		    -- preview_cutoff = 40,
		    -- width = 0.8
		    -- },
		-- horizontal = {
		    -- height = 0.9,
		    -- preview_cutoff = 120,
		    -- prompt_position = "bottom",
		    -- width = 0.8
		    -- },
		 vertical = {
		     prompt_position = "top",
		     height = .95,
		     preview_cutoff = 1,
		     width = 0.95
		 }
	    },
	mappings = {
	    i = { ["<C-l>"] = { "<esc>", type="command" }, }
	}
	},
	--    extensions = {
	    --	file_browser = {
		--	    theme = "ivy",
		--	    -- disables netrw and use telescope-file-browser in its place
		--	    hijack_netrw = true,
		--	    initial_mode = "normal",
		--	    mappings = {
		    --		["i"] = {
			--		    -- your custom insert mode mappings
			--		    },
			--		    ["n"] = {
			    --			-- your custom normal mode mappings
			    --			},
			    --		    },
			    --	    },
			    --	},
			    pickers ={
			    jumplist = {
				initial_mode = "normal"
			    }
			    },
}
local colors = require("catppuccin.palettes").get_palette()
local TelescopeColor = {
	TelescopeMatching = { fg = colors.flamingo },
	TelescopeSelection = { fg = colors.text, bg = colors.surface0, bold = true },
	TelescopePromptPrefix = { bg = colors.surface0 },
	TelescopePromptNormal = { bg = colors.surface0 },
	TelescopeResultsNormal = { bg = colors.mantle },
	TelescopePreviewNormal = { bg = colors.mantle },
	TelescopePromptBorder = { bg = colors.surface0, fg = colors.surface0 },
	TelescopeResultsBorder = { bg = colors.mantle, fg = colors.mantle },
	TelescopePreviewBorder = { bg = colors.mantle, fg = colors.mantle },
	TelescopePromptTitle = { bg = colors.pink, fg = colors.mantle },
	TelescopeResultsTitle = { fg = colors.mantle },
	TelescopePreviewTitle = { bg = colors.green, fg = colors.mantle },
}
for hl, col in pairs(TelescopeColor) do
	vim.api.nvim_set_hl(0, hl, col)
end

-- disable netrw at the very start of your init.lua
-- vim.g.loaded_netrw = 1
-- vim.g.loaded_netrwPlugin = 1

-- set termguicolors to enable highlight groups
vim.opt.termguicolors = true


-- To get telescope-file-browser loaded and working with telescope,
-- you need to call load_extension, somewhere after setup function:
-- require("telescope").load_extension "file_browser"

vim.keymap.set('n', '<leader><leader>r', ':source ~/.config/nvim/init.vim<cr>', {desc = "telescope file finder"})
vim.keymap.set('n', '<leader><leader>T', telesc.find_files, {desc = "telescope file finder"})
vim.keymap.set('n', '<leader><leader>g', telesc.live_grep, {desc = "telescope live grep the current directory"})
vim.keymap.set('n', '<leader>td', 'Otodo <esc>:call UltiSnips#ListSnippets()<cr>1<cr>', {desc = "create new todo with ultisnips"})
vim.keymap.set('n', '<leader><leader>G', 
    ':lua require("telescope.builtin").live_grep({search_dirs={vim.fn.expand("%:p")}})<cr>', 
    {desc = "telescope grep the current file"})
vim.keymap.set('n', '<leader><leader>f', ':FZF<cr>', {desc = "FZF"})
vim.keymap.set('n', '<C-S-j>', ':lua require("telescope.builtin").jumplist({})<cr>', {desc = "telescope jumplist"})
vim.keymap.set('n', '<leader><leader>S', ':lua require("telescope.builtin").tags({})<cr>', {desc = "telescope tags"})
-- vim.keymap.set('n', '<leader><leader>B', ':Telescope file_browser path=/home/justin/Insync/dealyjustins@gmail.com/Google\\ Drive/prog<cr>')
-- vim.keymap.set('n', '<leader><leader>b', ':Telescope file_browser path=%:p:h select_buffer=true<cr>')
vim.keymap.set('n', '<leader><leader>b', ':RnvimrToggle<cr>')
-- vim.keymap.set('n', '<leader><leader>b', ':Telescope file_browser path=%:p:h select_buffer=true<cr>')
vim.keymap.set('n', '<leader><leader>k', telesc.keymaps, {desc = "search vim help"})
-- vim.keymap.set('n', '<C-S-k>', ':lua Pandocomatic{latex=true}<cr>', {desc = "run pandocomatic"})
vim.keymap.set('n', '<C-0>', telesc.live_grep, {desc = "telescope live grep the current directory"})
vim.keymap.set('n', '<leader><leader>h', telesc.help_tags, {desc = "search vim help"})
vim.keymap.set('n', '<leader><leader>H', ':lua if origfiletype == nil then origfiletype = vim.bo.filetype end; if vim.bo.filetype ~= "html" then vim.bo.filetype = "html"; else vim.bo.filetype = origfiletype; end<cr>')
vim.keymap.set('n', '<leader><leader>v', ':lua require("telescope.builtin").live_grep({search_dirs={"/home/justin/Insync/dealyjustins@gmail.com/Google Drive/prog/learning/notes"}})<cr>')
vim.keymap.set('n', '<leader><leader>V', ':lua require("telescope.builtin").live_grep({search_dirs={"/home/justin/Insync/dealyjustins@gmail.com/Google Drive/prog"}})<cr>')
vim.keymap.set('n', '<C-Left>', ':res +1<cr>')
vim.keymap.set('n', '<C-Right>', ':res -1<cr>')
vim.keymap.set('n', '<C-Down>', ':vert res +1<cr>')
vim.keymap.set('n', '<C-Up>', ':vert res -1<cr>')
vim.keymap.set('n', '<C-PageDown>', ':res +15<cr>')
vim.keymap.set('n', '<C-PageUp>', ':res -15<cr>')
vim.keymap.set('n', '<C-S-Down>', ':vert res +15<cr>')
vim.keymap.set('n', '<C-S-Up>', ':vert res -15<cr>')
vim.keymap.set('n', '<leader>v', 'gv')
vim.keymap.set('v', '<c-l>', '<esc>')
vim.keymap.set('n', '<C-BS>', ':lua Quickgit{push=true}<cr>')
--vim.keymap.set('n', '<S-Down>', '<esc>')
--vim.keymap.set('n', '<S-Up>',   '<esc>')
--vim.keymap.set('i', '<S-Down>', '.<bs>')
--vim.keymap.set('i', '<S-Up>',   '.<bs>')
--vim.keymap.set('n', '<C-Down>', '<esc>')
--vim.keymap.set('n', '<C-Up>',   '<esc>')
--vim.keymap.set('i', '<C-Down>', '.<bs>')
--vim.keymap.set('i', '<C-Up>',   '.<bs>')
--vim.keymap.set('i', '<c-s>', '$')
vim.keymap.set('n', '<leader><leader>i', ':lua vim.lsp.buf.hover() vim.lsp.buf.hover()<cr>')

local keymap = vim.keymap.set

-- LSP finder - Find the symbol's definition
-- If there is no definition, it will instead be hidden
-- When you use an action in finder like "open vsplit",
-- you can use <C-t> to jump back
-- keymap("n", "gh", "<cmd>Lspsaga lsp_finder<CR>")

-- Code action
-- keymap({"n","v"}, "<leader>ca", "<cmd>Lspsaga code_action<CR>")

-- Rename all occurrences of the hovered word for the entire file
-- keymap("n", "gr", "<cmd>Lspsaga rename<CR>")

-- Rename all occurrences of the hovered word for the selected files
-- keymap("n", "gr", "<cmd>Lspsaga rename ++project<CR>")

-- Peek definition
-- You can edit the file containing the definition in the floating window
-- It also supports open/vsplit/etc operations, do refer to "definition_action_keys"
-- It also supports tagstack
-- Use <C-t> to jump back
-- keymap("n", "gp", "<cmd>Lspsaga peek_definition<CR>")
-- 
-- -- Go to definition
-- keymap("n","gd", "<cmd>Lspsaga goto_definition<CR>")
-- 
-- -- Peek type definition
-- -- You can edit the file containing the type definition in the floating window
-- -- It also supports open/vsplit/etc operations, do refer to "definition_action_keys"
-- -- It also supports tagstack
-- -- Use <C-t> to jump back
-- keymap("n", "gt", "<cmd>Lspsaga peek_type_definition<CR>")
-- 
-- -- Go to type definition
-- keymap("n","gt", "<cmd>Lspsaga goto_type_definition<CR>")
-- 
-- 
-- -- Show line diagnostics
-- -- You can pass argument ++unfocus to
-- -- unfocus the show_line_diagnostics floating window
-- keymap("n", "<leader><leader>sl", "<cmd>Lspsaga show_line_diagnostics<CR>")
-- 
-- -- Show buffer diagnostics
-- keymap("n", "<leader><leader>sb", "<cmd>Lspsaga show_buf_diagnostics<CR>")
-- 
-- -- Show workspace diagnostics
-- keymap("n", "<leader><leader>sw", "<cmd>Lspsaga show_workspace_diagnostics<CR>")
-- 
-- -- Show cursor diagnostics
-- keymap("n", "<leader><leader>sc", "<cmd>Lspsaga show_cursor_diagnostics<CR>")
-- 
-- -- Diagnostic jump
-- -- You can use <C-o> to jump back to your previous location
-- keymap("n", "[e", "<cmd>Lspsaga diagnostic_jump_prev<CR>")
-- keymap("n", "]e", "<cmd>Lspsaga diagnostic_jump_next<CR>")
-- 
-- Diagnostic jump with filters such as only jumping to an error
-- keymap("n", "[E", function()
  -- require("lspsaga.diagnostic"):goto_prev({ severity = vim.diagnostic.severity.ERROR })
-- end)
-- keymap("n", "]E", function()
  -- require("lspsaga.diagnostic"):goto_next({ severity = vim.diagnostic.severity.ERROR })
-- end)

-- Toggle outline
-- keymap("n","<leader>o", "<cmd>Lspsaga outline<CR>")

-- Hover Doc
-- If there is no hover doc,
-- there will be a notification stating that
-- there is no information available.
-- To disable it just use ":Lspsaga hover_doc ++quiet"
-- Pressing the key twice will enter the hover window
-- keymap("n", "K", "<cmd>Lspsaga hover_doc<CR>")

-- If you want to keep the hover window in the top right hand corner,
-- you can pass the ++keep argument
-- Note that if you use hover with ++keep, pressing this key again will
-- close the hover window. If you want to jump to the hover window
-- you should use the wincmd command "<C-w>w"
-- keymap("n", "K", "<cmd>Lspsaga hover_doc ++keep<CR>")

-- Call hierarchy
-- keymap("n", "<Leader>ci", "<cmd>Lspsaga incoming_calls<CR>")
-- keymap("n", "<Leader>co", "<cmd>Lspsaga outgoing_calls<CR>")

-- Floating terminal
-- keymap({"n", "t"}, "<A-d>", "<cmd>Lspsaga term_toggle<CR>")
keymap("n","<leader>kc", "inewkeyclaim <esc>:call UltiSnips#ListSnippets()<cr>1<cr>")

require('nvim-autopairs').setup({
    map_cr = true, 
    enable_check_bracket_line = true,                   -- Don't add pairs if it already have a close pairs in same line
    disable_filetype = { "TelescopePrompt" , "vim" },   --
    enable_afterquote = false,                           -- add bracket pairs after quote
    enable_moveright = true
})

local orig_util_open_floating_preview = vim.lsp.util.open_floating_preview
function vim.lsp.util.open_floating_preview(contents, syntax, opts, ...)
  opts = opts or {}
  opts.border = 'single'
  opts.max_width= opts.max_width or 200
  opts.height = 10
  return orig_util_open_floating_preview(contents, syntax, opts, ...)
end

-- If you want insert `(` after select function or method item
local cmp_autopairs = require('nvim-autopairs.completion.cmp')
local cmp = require'cmp'
cmp.setup({
snippet = {
  -- REQUIRED - you must specify a snippet engine
  expand = function(args)
    -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
    -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
    vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
  end,
},
window = {
    completion = cmp.config.window.bordered({
	winhighlight = "Normal:Normal,FloatBorder:BorderBG,CursorLine:PmenuSel,Search:None",
    }),
  documentation = cmp.config.window.bordered({
	winhighlight = "Normal:Normal,FloatBorder:BorderBG,CursorLine:PmenuSel,Search:None",
    }),
},
mapping = cmp.mapping.preset.insert({
  ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
  ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
  ['<C-j>'] = cmp.mapping.select_next_item(),
  ['<C-k>'] = cmp.mapping.select_prev_item(),
  ['<C-Space>'] = cmp.mapping.complete(),
  -- ['<C-e>'] = cmp.mapping.abort(),
  ['<C-e>'] = cmp.mapping.close(),
  ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
}),
sources = cmp.config.sources({
{ name = 'nvim_lsp' },
{ name = 'nvim_lua' },
{ name = 'calc' },
-- { name = 'ultisnips' }, -- For ultisnips users.
{ name = 'nvim_lsp_signature_help' },
{ name = 'pandoc_references' },
{ name = 'path' },
{ name = 'omni' },
})
})

-- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
sources = cmp.config.sources({
  { name = 'git' }, -- You can specify the `git` source if [you were installed it](https://github.com/petertriho/cmp-git).
}, {
  { name = 'buffer' },
})
})

-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({ '/', '?' }, {
mapping = cmp.mapping.preset.cmdline(),
sources = {
  { name = 'buffer' }
}
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
mapping = cmp.mapping.preset.cmdline(),
sources = cmp.config.sources({
  { name = 'path' }
}, {
  { name = 'cmdline' }
})
})

local Rule = require('nvim-autopairs.rule')
local npairs = require('nvim-autopairs')
local cond = require('nvim-autopairs.conds')
-- add option map_cr
npairs.add_rules { 
  Rule('\\{', '\\}', {"tex", "latex"}),
  Rule(' ', ' ')
    :with_pair(function (opts)
      local pair = opts.line:sub(opts.col - 1, opts.col)
      local quad = opts.line:sub(opts.col - 2, opts.col + 1)
      return vim.tbl_contains({ '()', '[]', '{}' }, pair) or vim.tbl_contains({ '\\{\\}' }, quad)
    end),
  Rule('( ', ' )')
      :with_pair(function() return false end)
      :with_move(function(opts)
          return opts.prev_char:match('.%)') ~= nil
      end)
      :use_key(')'),
  Rule('{ ', ' }')
      :with_pair(function() return false end)
      :with_move(function(opts)
          return opts.prev_char:match('.%}') ~= nil
      end)
      :use_key('}'),
  Rule('[ ', ' ]')
      :with_pair(function() return false end)
      :with_move(function(opts)
          return opts.prev_char:match('.%]') ~= nil
      end)
      :use_key(']'),
  --[===[
  arrow key on javascript
      Before 	Insert    After
      (item)= 	> 	    (item)=> { }
  --]===]
  Rule('%(.*%)%s*%=>$', ' {  }', { 'typescript', 'typescriptreact', 'javascript' })
    :use_regex(true)
    :set_end_pair_length(2),
}

cmp.event:on('confirm_done', cmp_autopairs.on_confirm_done())



-- Associating TS emphasis groups with markdown groups 
vim.api.nvim_set_hl(0, "@text.strong", { link = "markdownBold" })
vim.api.nvim_set_hl(0, "@text.emphasis", { link = "markdownItalic" })

vim.api.nvim_command("hi Function guifg=#FFAAFF")
vim.api.nvim_command("hi Type guifg=#CCFFAA")
vim.api.nvim_command("hi Normal guifg=#A0F0FF")
vim.api.nvim_command("hi DiagnosticError guifg=red")
vim.cmd[[hi lualine_c_inactive guibg=#000000 guifg=#EE6C05 gui=italic]]
